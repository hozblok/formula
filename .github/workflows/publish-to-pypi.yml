# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "pypy-3.8"]
        os: [windows-latest, macos-latest, ubuntu-latest]
        architecture: [x64]
        include:
          - python-version: 3.6
            os: windows-latest
            architecture: x86
          - python-version: 3.7
            os: windows-latest
            architecture: x86
          - python-version: 3.8
            os: windows-latest
            architecture: x86
          - python-version: 3.9
            os: windows-latest
            architecture: x86
          - python-version: "pypy-3.8"
            os: windows-latest
            architecture: x86
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py --quiet build sdist bdist_wheel bdist_egg
          python -c "import os; paths = ' '.join(os.path.abspath(el.path) for el in os.scandir('dist')); os.system(f'python -m twine check {paths}')"
          python -c "import os; paths = ' '.join(os.path.abspath(el.path) for el in os.scandir('dist')); os.system(f'python -m twine upload --non-interactive --skip-existing {paths}')"
